# start command
set -g default-command "/bin/zsh -l"

# variables
IS_OSX="uname | grep -q Darwin"

# HACK: grepping pane_current_command is broken if we start vim with shell script,
# but grepping window title might be problematic, works for now though...
# IS_VIM='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
# IS_VIM='echo "#T" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?"
IS_VIM="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

if-shell "$IS_OSX" \
    "bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel 'pbcopy'" \
    "bind-key -T copy-mode-vi y send -X copy-selection-and-cancel"

if-shell "$IS_OSX" \
    "bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel 'pbcopy'" \
    "bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-selection-and-cancel"

# # italics - tmux-256color-italic on osx, otherwise screen-256color
# if-shell "$IS_OSX" \
#    "set -g default-terminal 'tmux-256color-italic'" \
#    "set -g default-terminal 'screen-256color'"

# fix for terminal in osx
# if-shell "$IS_OSX" "set -ga terminal-overrides ',xterm-256color:Tc'"

# basic term setting
# set -g default-terminal "screen-256color"
set -g default-terminal "tmux-256color"
if-shell "$IS_OSX" "set -ga terminal-overrides ',xterm-256color:Tc'"

# visual bell
set  -g bell-action any
set  -g visual-bell on
setw -g monitor-activity on

# mouse
set -g mouse on

# don't extend dragged selection
bind-key -T copy-mode-vi WheelUpPane select-pane\; send-keys -t "{mouse}" -X clear-selection\; send-keys -t "{mouse}" -X scroll-up
bind-key -T copy-mode-vi WheelDownPane select-pane\; send-keys -t "{mouse}" -X clear-selection\; send-keys -t "{mouse}" -X scroll-down

# make double and triple click work outside of copy mode
# bind-key -T root DoubleClick1Pane if-shell -Ft{mouse} "#{alternate_on}" "send-keys -M" "copy-mode -t{mouse}; send-keys -t{mouse} -X select-word"
# bind-key -T root TripleClick1Pane if-shell -Ft{mouse} "#{alternate_on}" "send-keys -M" "copy-mode -t{mouse}; send-keys -t{mouse} -X select-line"

# stay in copy mode when selecting stuff!
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# [s]earch for selected text
bind-key -T copy-mode-vi 's' send-keys -X copy-selection\; run-shell "s --provider google $(tmux show-buffer)"

# [o]pen selected text (filepath, url)
bind-key -T copy-mode-vi 'o' send-keys -X copy-selection\; run-shell "open $(tmux show-buffer)"

# [g]o to previous prompt
bind-key -T copy-mode-vi 'g' send-keys -X start-of-line\; send-keys -X search-backward " > "\; send-keys -X start-of-line

# history
set -g history-limit 100000

# window titles
set -g set-titles on
set -g set-titles-string "#T"
setw -g automatic-rename on

# better resizing
setw -g aggressive-resize on

# decrease command delay (increases vim responsiveness)
set -sg escape-time 0
set -sg repeat-time 500

# message display time
set -g display-time 1000

# send events to vim
set -g focus-events on

# start indexing with 1
set  -g base-index 1
setw -g pane-base-index 1

# re-number windows when one is closed
set -g renumber-windows on

# screen like bindings
unbind C-b
set -g prefix C-a
bind a send-prefix

# vim-like splits
bind v split-window -h -c "#{pane_current_path}"
bind s split-window -v -c "#{pane_current_path}"
bind V split-window -f -h -c "#{pane_current_path}"
bind S split-window -f -v -c "#{pane_current_path}"

# choose sessions and windows with "f", choose only windows with "w"
# dirty trick for fullscreen interactive command
# split window first, and then fullscreen it with resize
unbind f
unbind w
bind f run "tmux split-window -h -f ftpane; tmux resize-pane -Z"
bind w run "tmux split-window -h -f ftwin; tmux resize-pane -Z"

# toggle s[t]atusbar
unbind t
bind t set status

# vim pane movements
bind -n C-h if-shell "$IS_VIM" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$IS_VIM" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$IS_VIM" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$IS_VIM" "send-keys C-l" "select-pane -R"
bind -T copy-mode-vi C-h select-pane -L
bind -T copy-mode-vi C-j select-pane -D
bind -T copy-mode-vi C-k select-pane -U
bind -T copy-mode-vi C-l select-pane -R

# disable arrows for pane switching
unbind up
unbind down
unbind left
unbind right

# pane resizing
bind -r < resize-pane -L 1
bind -r > resize-pane -R 1
bind -r - resize-pane -D 1
bind -r + resize-pane -U 1

# equal sizes
bind = select-layout tiled

# window switching
unbind n
unbind p
unbind ]
bind -r ] next-window
bind -r [ previous-window

# session switching
bind -r '{' switch-client -n
bind -r '}' switch-client -p

# vim-like copy mode enter and paste
bind Escape copy-mode -e
bind p      paste-buffer

# vim-like bindings in copy mode
setw -g mode-keys vi
bind -T copy-mode-vi v      send-keys -X begin-selection
bind -T copy-mode-vi V      send-keys -X select-line
bind -T copy-mode-vi H      send-keys -X start-of-line
bind -T copy-mode-vi L      send-keys -X end-of-line
bind -T copy-mode-vi Escape send-keys -X cancel
bind -T copy-mode-vi C-v    send-keys -X rectangle-toggle \; send -X begin-selection

# inceremental search
bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""

# easier pane killing
bind K kill-pane

# quick pane cycling
unbind ^A
bind -r ^A select-pane -t :.+

# new window with the same PWD
unbind c
bind c new-window -c "#{pane_current_path}"

# sidepanes - 10 height / 80 width
bind H run "tmux split-window -f -h -c '#{pane_current_path}'; tmux swap-pane -U; tmux resize-pane -x 80"
bind J split-window -f -l 10 -c "#{pane_current_path}"
bind K run "tmux split-window -f -c '#{pane_current_path}'; tmux swap-pane -U; tmux resize-pane -y 10"
bind L split-window -f -h -l 80 -c "#{pane_current_path}"

# reload config
unbind r
bind r source-file ~/.tmux.conf\; display "Reloaded!"

# status bar
setw -g status on
set  -g status-interval 0
set  -g window-status-separator ""
set  -g status-justify "left"
set  -g status-left-length  40
set  -g status-right-length 40

# status bar window
# setw -g window-status-current-format "#[bg=colour008, fg=colour000] #{=64:pane_title}#{?window_activity_flag, ○,}#{?window_bell_flag, !,}#{?window_zoomed_flag, ❐,} #[bg=colour018]"
# setw -g window-status-format         "#[bg=colour019, fg=colour007] #{=64:pane_title}#{?window_activity_flag, ○,}#{?window_bell_flag, !,}#{?window_zoomed_flag, ❐,} #[bg=colour018]"
setw -g window-status-current-format "#[bg=colour008, fg=colour000] #{=64:pane_title}#{?window_bell_flag, ○,}#{?window_zoomed_flag, ❐,} #[bg=colour018]"
setw -g window-status-format         "#[bg=colour019, fg=colour007] #{=64:pane_title}#{?window_bell_flag, ○,}#{?window_zoomed_flag, ❐,} #[bg=colour018]"

# pane border colors
set -g pane-border-style "fg=colour018,bg=colour000"
set -g pane-active-border-style "fg=colour018,bg=colour000"

# other colors
setw -g clock-mode-colour 0
set -g display-panes-active-colour colour012
set -g display-panes-colour 0

# left/right status items
set -g status-left  ""
set -g status-right "#[bg=colour008, fg=colour000] #(echo `hostname | cut -d '.' -f1` : `tmux display-message -p '#S'` | tr '[:lower:]' '[:upper:]') "

# more colors
setw -g window-status-style          "bg=colour018, fg=colour007"
setw -g window-status-current-style  "bg=colour008, fg=colour019"
setw -g window-status-activity-style "bg=colour019, fg=colour015"
setw -g window-status-bell-style     "bg=colour019, fg=colour015"

set  -g message-command-style        "bg=colour018, fg=colour008"
set  -g message-style                "bg=colour018, fg=colour008"
set  -g status-style                 "bg=colour018, fg=colour008"
set  -g mode-style                   "bg=colour019, fg=white"

# set  -g message-bg colour018
# set  -g message-fg colour008
# set  -g status-bg  colour018
# set  -g status-fg  colour008
# setw -g mode-fg    white
# setw -g mode-bg    colour019

# resurrect settings
# set -g @resurrect-capture-pane-contents "off"
# set -g @resurrect-processes "v vim nvim bash"
# set -g @continuum-save-interval "10"

# plugins
# if-shell "test -f ~/.tmux/plugins/tmux-resurrect/resurrect.tmux" "run-shell ~/.tmux/plugins/tmux-resurrect/resurrect.tmux"
# if-shell "test -f ~/.tmux/plugins/tmux-continuum/continuum.tmux" "run-shell ~/.tmux/plugins/tmux-continuum/continuum.tmux"

# for base16-shell -> https://github.com/tmux/tmux/issues/3218#issuecomment-1153404631
set -g allow-passthrough on

